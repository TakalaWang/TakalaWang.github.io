---
import { getEntry } from 'astro:content'
import { achievements } from '@/config';
import Markdown from "@components/misc/Markdown.astro";

interface Props {
    lang: string;
};

const { lang } = Astro.props;

const aboutPost = await getEntry('about', `about-${lang}`);

let Content;
if (aboutPost) {
    const rendered = await aboutPost.render();
    Content = rendered.Content;
} else {
    Content = 'About content not found.';
}


---

<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
    <div class="card-base z-10 px-9 py-6 relative w-full ">
        <Markdown class="mt-2">
            {typeof Content === 'string' ? Content : <Content />}
        </Markdown>
        {achievements.length > 0 && (
            <div class="m-0.5 py-5 font-bold text-2xl mb-1 dark:text-neutral-50 transition">
                Achievements
            </div>
        )}
        {achievements.map((achievement) => {
            return (
                <div class="flex flex-row justify-start items-center group btn-plain h-10 w-full rounded-lg p-2">
                    <div class="w-[15%] md:w-[20%] transition text-base text-left text-50">
                        {achievement.time}
                    </div>
                    <div class="w-[15%] md:w-[10%] relative dash-line h-full flex items-center">
                        <div class="transition-all mx-auto w-1 h-1 rounded
                        bg-[oklch(0.5_0.05_var(--hue))]
                        outline outline-4 z-50
                        outline-[var(--card-bg)]
                        "
                        ></div>
                    </div>
                    <div class="w-[70%] md:max-w-[65%] md:w-[65%] text-left
                        text-75 pr-8 whitespace-nowrap overflow-ellipsis overflow-hidden"
                    >
                        {achievement.content}
                    </div>
                </div>
            )
        })}
    </div>
</div>

<style>
    @tailwind components;
    @tailwind utilities;

    @layer components {
        .dash-line {
        }
        .dash-line::before {
            content: "";
            @apply w-[10%] h-10 absolute -top-1/2 left-[calc(50%_-_1px)] border-l-[2px]
            border-dashed pointer-events-none border-[var(--line-color)] transition
        }
    }
</style>
